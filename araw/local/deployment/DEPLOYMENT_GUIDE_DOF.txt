================================================================================
ARAW PHILIPPINE CLIMATE FINANCE DASHBOARD
DEPLOYMENT GUIDE FOR DEPARTMENT OF FINANCE
RHEL 8/9 + MySQL 8.0+ DEPLOYMENT
================================================================================

Document Version: 2.0
Target Deployment: October 2025 (New Version)
Deployment Platform: Red Hat Enterprise Linux (RHEL) 8 or 9 with MySQL 8.0+
Prepared for: Asst. Secretary Angie, Department of Finance
Contact: Jhonnel (Project Manager)

NOTE: This guide is specifically designed for RHEL + MySQL deployment only.

================================================================================
TABLE OF CONTENTS
================================================================================

1. EXECUTIVE SUMMARY
2. SYSTEM REQUIREMENTS (RHEL + MySQL)
3. PRE-DEPLOYMENT CHECKLIST
4. DEPLOYMENT ARCHITECTURE
5. STEP-BY-STEP DEPLOYMENT INSTRUCTIONS (RHEL + MySQL)
6. POST-DEPLOYMENT VERIFICATION
7. TROUBLESHOOTING GUIDE (RHEL + MySQL)
8. MAINTENANCE & UPDATES
9. SECURITY CONSIDERATIONS
10. SUPPORT & CONTACTS

================================================================================
1. EXECUTIVE SUMMARY
================================================================================

The ARAW Climate Finance Dashboard is a Next.js 15.5.3 web application designed
to visualize and analyze climate finance data across 165+ data sources from 20+
government agencies in the Philippines.

KEY FEATURES:
- Real-time climate finance data visualization
- Multi-agency data integration (BOI, BSP, BTr, CCC, NEDA, PSA, etc.)
- Interactive Philippine regional mapping
- Export capabilities (CSV, XLSX, PDF, JSON)
- Role-based access control
- Government-compliant security standards

TECHNOLOGY STACK:
- Frontend: Next.js 15.5.3 + React 19.1.0
- UI Framework: HeroUI 2.8.4 + Tailwind CSS 4
- Charts: Recharts 3.2.0
- Maps: Leaflet 1.9.4 + React-Leaflet 5.0.0
- Operating System: Red Hat Enterprise Linux (RHEL) 8+
- Database: MySQL 8.0+
- Web Server: Nginx (reverse proxy)
- Authentication: NextAuth 4.24.11

BUILD SIZE: ~128kB (optimized)
PERFORMANCE: <2s initial load, <200ms interaction response

================================================================================
2. SYSTEM REQUIREMENTS (RHEL + MySQL)
================================================================================

MINIMUM REQUIREMENTS:
-------------------
Server/Hardware:
- CPU: 2 cores (4 cores recommended)
- RAM: 4GB minimum (8GB recommended)
- Storage: 10GB available disk space
- Network: 10 Mbps internet connection

Operating System:
- Red Hat Enterprise Linux (RHEL) 8 or 9

Software Prerequisites:
- Node.js v20.0.0 or higher (LTS version recommended)
- npm v10.0.0 or higher (comes with Node.js)
- Git v2.30 or higher (for version control)
- Web Browser: Chrome 100+, Firefox 100+, Edge 100+, Safari 15+

RECOMMENDED FOR PRODUCTION:
-------------------------
- CPU: 4+ cores
- RAM: 16GB+
- Storage: 50GB SSD
- Network: 100 Mbps dedicated connection
- Load Balancer (for high traffic)
- MySQL 8.0+ database server
- SSL/TLS certificate (for HTTPS)
- Nginx reverse proxy

================================================================================
3. PRE-DEPLOYMENT CHECKLIST
================================================================================

[ ] RHEL 8+ server provisioned and accessible
[ ] Server meets minimum requirements
[ ] Node.js 20+ installed (verify: node --version)
[ ] npm 10+ installed (verify: npm --version)
[ ] Git installed (verify: git --version)
[ ] MySQL 8.0+ server installed and running
[ ] MySQL root password set and documented
[ ] Network access to GitHub repository
[ ] Firewall rules configured (allow port 3000 or custom port)
[ ] SSL certificate obtained (if deploying with HTTPS)
[ ] Backup and rollback plan prepared
[ ] IT team notified of deployment schedule
[ ] User access credentials prepared
[ ] Data sources connection information available

NETWORK REQUIREMENTS:
[ ] Outbound HTTPS access (port 443) for data sources
[ ] Inbound access on deployment port (default: 3000)
[ ] Access to government agency APIs (if applicable)

PERSONNEL REQUIRED:
[ ] System Administrator (for server access)
[ ] Network Administrator (for firewall/proxy configuration)
[ ] DBA (if using database)
[ ] Application Support Personnel (post-deployment)

================================================================================
4. DEPLOYMENT ARCHITECTURE
================================================================================

RHEL STANDALONE SERVER DEPLOYMENT
----------------------------------
On-premise deployment for complete data sovereignty and government compliance.

Server Specifications:
- Operating System: Red Hat Enterprise Linux (RHEL) 8 or 9
- Database: MySQL 8.0+
- Web Server: Nginx (reverse proxy)
- Process Manager: PM2
- Security: SELinux + firewalld + SSL/TLS

Key Benefits:
- Complete data sovereignty
- No dependency on external cloud services
- Full customization capability
- Meets government security requirements
- RHEL enterprise support and compliance
- Government audit compliance

Requirements:
- In-house infrastructure
- RHEL subscription
- IT team for maintenance
- Regular security updates

Estimated Deployment Time: 3-5 hours

================================================================================
5. STEP-BY-STEP DEPLOYMENT INSTRUCTIONS (RHEL + MySQL)
================================================================================

PHASE 1: RHEL SERVER PREPARATION
---------------------------------

Step 1.1: Install Node.js on RHEL
----------------------------------
RHEL 8/9:
1. Enable EPEL repository:
   sudo dnf install -y epel-release

2. Install Node.js 20 LTS from NodeSource:
   curl -fsSL https://rpm.nodesource.com/setup_20.x | sudo bash -
   sudo dnf install -y nodejs

3. Verify installation:
   node --version    # Should show v20.x.x
   npm --version     # Should show v10.x.x

4. Install build tools (required for some npm packages):
   sudo dnf groupinstall -y "Development Tools"

Step 1.2: Install Git on RHEL
-----------------------------
RHEL 8/9:
sudo dnf install -y git

Verify installation:
git --version

Step 1.3: Install and Configure MySQL 8.0
-----------------------------------------
RHEL 8/9:

1. Add MySQL repository:
   sudo dnf install -y https://dev.mysql.com/get/mysql80-community-release-el8-1.noarch.rpm

2. Install MySQL Server:
   sudo dnf install -y mysql-server

3. Start MySQL service:
   sudo systemctl start mysqld
   sudo systemctl enable mysqld

4. Secure MySQL installation:
   sudo mysql_secure_installation
   
   Follow prompts:
   - Set root password (SAVE THIS PASSWORD!)
   - Remove anonymous users: Y
   - Disallow root login remotely: Y
   - Remove test database: Y
   - Reload privilege tables: Y

5. Create database for ARAW:
   sudo mysql -u root -p
   
   In MySQL prompt:
   CREATE DATABASE araw_climate_finance CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
   CREATE USER 'araw_user'@'localhost' IDENTIFIED BY '[STRONG_PASSWORD]';
   GRANT ALL PRIVILEGES ON araw_climate_finance.* TO 'araw_user'@'localhost';
   FLUSH PRIVILEGES;
   EXIT;

6. Verify MySQL is running:
   sudo systemctl status mysqld

Step 1.4: Create Application Directory
--------------------------------------
RHEL:
sudo mkdir -p /var/www/araw-dashboard
sudo chown -R $USER:$USER /var/www/araw-dashboard
cd /var/www/araw-dashboard


PHASE 2: APPLICATION DEPLOYMENT
-------------------------------

Step 2.1: Obtain Source Code
----------------------------
Method A: From Git Repository (Recommended)
git clone https://github.com/[ORGANIZATION]/climate-finance-dashboard.git
cd climate-finance-dashboard/araw
git checkout feature/v3.0-redesign

Method B: From Zip File
1. Extract provided ZIP file to application directory
2. Navigate to 'araw' folder

Step 2.2: Install Dependencies
------------------------------
This step downloads all required packages (~200MB)

Run:
npm install

Expected time: 5-10 minutes (depending on internet speed)

You should see output indicating successful package installation.

Step 2.3: Configuration
----------------------
Create environment configuration file:

RHEL:
cp .env.example .env.local

Edit .env.local with required settings:
nano .env.local   # or use vi/vim

# Application Settings
NODE_ENV=production
NEXT_PUBLIC_APP_URL=http://[YOUR_SERVER_IP]:3000

# MySQL Database Configuration (REQUIRED FOR DOF)
DATABASE_URL=mysql://araw_user:[PASSWORD]@localhost:3306/araw_climate_finance
DB_HOST=localhost
DB_PORT=3306
DB_NAME=araw_climate_finance
DB_USER=araw_user
DB_PASSWORD=[STRONG_PASSWORD_FROM_STEP_1.3]

# Authentication (Optional - for user login)
NEXTAUTH_SECRET=[GENERATE_RANDOM_SECRET]
NEXTAUTH_URL=http://[YOUR_SERVER_IP]:3000

# Data Sources (Configure as needed)
ENABLE_REAL_DATA_SOURCES=false

Generate random secret for NEXTAUTH_SECRET:
node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"

IMPORTANT: Replace [PASSWORD] and [STRONG_PASSWORD_FROM_STEP_1.3] with the
MySQL password you created in Step 1.3. Keep this file secure!

Note: For initial deployment, mock data is used. Real data source integration
can be configured after successful deployment.

Step 2.4: Build Application
---------------------------
This compiles the application for production use.

Run:
npm run build

Expected time: 2-5 minutes

Successful build will show:
✓ Compiled successfully
✓ Linting and checking validity of types
✓ Creating an optimized production build
✓ Route (app)                              Size
  ○ /                                      [size details]

If errors occur, see TROUBLESHOOTING GUIDE (Section 7).


PHASE 3: DEPLOYMENT & STARTUP
-----------------------------

Step 3.1: Start Application
--------------------------
For testing/development:
npm run dev

For production:
npm start

The application will start on http://localhost:3000

You should see:
▲ Next.js [version]
- Local:        http://localhost:3000
- Ready in [time]

Step 3.2: Verify Application Access
----------------------------------
1. Open web browser
2. Navigate to: http://localhost:3000
3. You should see the ARAW Dashboard homepage
4. Verify these elements load:
   - DOF logo and header
   - Dataset navigation (NAP, NDCIP, BUDGET, PROJECTS)
   - KPI cards (5 cards with data)
   - Philippine map
   - Charts and visualizations

Step 3.3: Configure as System Service (Production - RHEL)
--------------------------------------------------------
For persistent operation (survives server restarts):

Install PM2 process manager:
sudo npm install -g pm2

Start application with PM2:
cd /var/www/araw-dashboard/araw
pm2 start npm --name "araw-dashboard" -- start
pm2 save

Configure PM2 to start on boot (RHEL systemd):
pm2 startup systemd -u $USER --hp /home/$USER
# Copy and run the command that PM2 outputs

PM2 will now auto-start the application on server boot.

Useful PM2 commands:
pm2 status                    # Check application status
pm2 logs araw-dashboard       # View application logs
pm2 restart araw-dashboard    # Restart application
pm2 stop araw-dashboard       # Stop application
pm2 monit                     # Real-time monitoring


PHASE 4: NETWORK CONFIGURATION
------------------------------

Step 4.1: Configure Firewall (RHEL firewalld)
---------------------------------------------
RHEL uses firewalld by default:

1. Check firewall status:
   sudo systemctl status firewalld

2. Allow application port (3000):
   sudo firewall-cmd --permanent --add-port=3000/tcp
   
3. Allow HTTP and HTTPS (for reverse proxy):
   sudo firewall-cmd --permanent --add-service=http
   sudo firewall-cmd --permanent --add-service=https

4. Reload firewall:
   sudo firewall-cmd --reload

5. Verify rules:
   sudo firewall-cmd --list-all

Step 4.2: Install and Configure Nginx (RHEL)
-------------------------------------------
For production, use Nginx to:
- Enable HTTPS (SSL/TLS)
- Serve on standard port 80/443
- Add security headers
- Enable compression

1. Install Nginx:
   sudo dnf install -y nginx

2. Create Nginx configuration:
   sudo nano /etc/nginx/conf.d/araw-dashboard.conf

3. Add this configuration:

server {
    listen 80;
    server_name [your-domain-or-ip];

    # Redirect to HTTPS (after SSL setup)
    # return 301 https://$server_name$request_uri;

    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
    }
}

4. Test Nginx configuration:
   sudo nginx -t

5. Start and enable Nginx:
   sudo systemctl start nginx
   sudo systemctl enable nginx

6. Set SELinux to allow Nginx network connections (RHEL specific):
   sudo setsebool -P httpd_can_network_connect 1

Step 4.3: Enable HTTPS (Recommended)
-----------------------------------
1. Obtain SSL certificate from DOF IT Security

2. Copy certificate files to server:
   sudo mkdir -p /etc/nginx/ssl
   sudo cp [certificate.crt] /etc/nginx/ssl/
   sudo cp [private.key] /etc/nginx/ssl/
   sudo chmod 600 /etc/nginx/ssl/private.key

3. Update Nginx configuration for HTTPS:
   sudo nano /etc/nginx/conf.d/araw-dashboard.conf

   Add HTTPS server block:

server {
    listen 443 ssl http2;
    server_name [your-domain-or-ip];

    ssl_certificate /etc/nginx/ssl/certificate.crt;
    ssl_certificate_key /etc/nginx/ssl/private.key;
    
    # Modern SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
    }
}

4. Reload Nginx:
   sudo systemctl reload nginx

5. Update .env.local:
   NEXT_PUBLIC_APP_URL=https://[your-domain-or-ip]
   NEXTAUTH_URL=https://[your-domain-or-ip]

6. Restart application:
   pm2 restart araw-dashboard

================================================================================
6. POST-DEPLOYMENT VERIFICATION
================================================================================

FUNCTIONAL TESTS:
----------------
[ ] Homepage loads successfully
[ ] All navigation tabs work (NAP, NDCIP, BUDGET, PROJECTS)
[ ] KPI cards display data correctly
[ ] Charts render properly (no blank/error states)
[ ] Philippine map is interactive and responsive
[ ] Filter controls work (sidebar filters)
[ ] Export functionality works (CSV, XLSX, PDF)
[ ] Page loads in under 3 seconds
[ ] No console errors in browser developer tools

PERFORMANCE TESTS:
-----------------
[ ] Initial page load: < 3 seconds
[ ] Navigation between datasets: < 1 second
[ ] Chart interactions: < 200ms response
[ ] Export generation: < 5 seconds
[ ] Simultaneous user access: Test with 10+ users

SECURITY TESTS:
--------------
[ ] HTTPS enabled (if configured)
[ ] Authentication required (if enabled)
[ ] No sensitive data exposed in browser console
[ ] API endpoints protected
[ ] File upload restrictions in place (if applicable)

BROWSER COMPATIBILITY:
---------------------
Test on:
[ ] Google Chrome (latest)
[ ] Mozilla Firefox (latest)
[ ] Microsoft Edge (latest)
[ ] Safari (if Mac users)

MOBILE RESPONSIVENESS:
---------------------
[ ] Tablet view (iPad, Android tablets)
[ ] Mobile view (smartphones)
[ ] Touch interactions work properly

MONITORING SETUP:
----------------
[ ] Application logs accessible
[ ] Error tracking configured
[ ] Performance monitoring active
[ ] Disk space monitoring
[ ] Memory usage monitoring

================================================================================
7. TROUBLESHOOTING GUIDE (RHEL + MySQL)
================================================================================

ISSUE: npm install fails
SOLUTION:
1. Check internet connection
2. Clear npm cache: npm cache clean --force
3. Delete node_modules folder and package-lock.json
4. Try again: npm install
5. If firewall issue, configure proxy:
   npm config set proxy http://proxy-server:port
   npm config set https-proxy http://proxy-server:port

ISSUE: Build fails with TypeScript errors
SOLUTION:
1. Ensure Node.js version is 20+
2. Delete node_modules and reinstall: 
   rm -rf node_modules package-lock.json
   npm install
3. Run build again: npm run build

ISSUE: Application won't start (EADDRINUSE error)
SOLUTION:
Port 3000 already in use.
1. Find process using port:
   Windows: netstat -ano | findstr :3000
   Linux: lsof -i :3000
2. Kill process or change port:
   Change port in package.json:
   "start": "next start -p 3001"

ISSUE: Page loads but shows errors
SOLUTION:
1. Check browser console for errors (F12 → Console tab)
2. Check application logs: pm2 logs araw-dashboard
3. Verify all dependencies installed: npm list
4. Clear browser cache and reload

ISSUE: Charts not displaying
SOLUTION:
1. Verify data sources configured correctly
2. Check network tab in browser (F12 → Network)
3. Ensure API routes are accessible
4. Check for JavaScript errors in console

ISSUE: Slow performance
SOLUTION:
1. Check server resources (CPU, RAM, disk)
2. Optimize database queries (if using DB)
3. Enable caching in configuration
4. Consider upgrading server hardware
5. Implement CDN for static assets

ISSUE: Cannot access from other computers
SOLUTION:
1. Verify firewall allows port 3000
2. Check application is binding to 0.0.0.0, not localhost
3. Update Next.js config to allow external access
4. Verify network routing/NAT configuration

ISSUE: Authentication not working
SOLUTION:
1. Verify NEXTAUTH_SECRET is set in .env.local
2. Check NEXTAUTH_URL matches deployment URL
3. Clear browser cookies and try again
4. Check authentication provider configuration

ISSUE: Export functionality fails
SOLUTION:
1. Check disk space available for temp files
2. Verify write permissions on temp directory
3. Check for browser popup blockers
4. Try smaller dataset export first

ISSUE: MySQL connection errors
SOLUTION:
1. Verify MySQL is running:
   sudo systemctl status mysqld
2. Check MySQL credentials in .env.local
3. Test MySQL connection:
   mysql -u araw_user -p araw_climate_finance
4. Check MySQL error logs:
   sudo tail -f /var/log/mysqld.log
5. Verify database exists:
   mysql -u root -p -e "SHOW DATABASES;"
6. Check user permissions:
   mysql -u root -p -e "SHOW GRANTS FOR 'araw_user'@'localhost';"

ISSUE: SELinux blocking Nginx (RHEL specific)
SOLUTION:
1. Check SELinux status:
   getenforce
2. Allow Nginx network connections:
   sudo setsebool -P httpd_can_network_connect 1
3. Check SELinux logs:
   sudo tail -f /var/log/audit/audit.log
4. Temporarily disable SELinux for testing (not recommended for production):
   sudo setenforce 0

ISSUE: Firewalld blocking connections (RHEL)
SOLUTION:
1. Check firewall status:
   sudo firewall-cmd --list-all
2. Verify ports are open:
   sudo firewall-cmd --list-ports
3. Add port if missing:
   sudo firewall-cmd --permanent --add-port=3000/tcp
   sudo firewall-cmd --reload
4. Test from another machine:
   telnet [server-ip] 3000

ISSUE: Node.js build fails on RHEL
SOLUTION:
1. Install Development Tools:
   sudo dnf groupinstall -y "Development Tools"
2. Install Python (required for some npm packages):
   sudo dnf install -y python3
3. Clear npm cache:
   npm cache clean --force
4. Remove node_modules and reinstall:
   rm -rf node_modules package-lock.json
   npm install

================================================================================
8. MAINTENANCE & UPDATES
================================================================================

ROUTINE MAINTENANCE SCHEDULE:
----------------------------

DAILY:
- Monitor application logs for errors
- Check disk space utilization
- Verify application is responding

WEEKLY:
- Review performance metrics
- Check for security updates
- Backup configuration files

MONTHLY:
- Update npm dependencies (security patches)
- Review and optimize database (if using)
- Test backup restoration procedure
- Review user access logs

QUARTERLY:
- Major version updates (if available)
- Performance optimization review
- Security audit
- User training refresh

UPDATING THE APPLICATION:
------------------------

Step 1: Backup Current Version
cd /var/www/araw-dashboard/araw
cp -r . ../araw-backup-$(date +%Y%m%d)

Step 2: Pull Latest Code
git fetch origin
git checkout [new-version-branch]
git pull origin [new-version-branch]

Step 3: Update Dependencies
npm install

Step 4: Rebuild Application
npm run build

Step 5: Restart Application
pm2 restart araw-dashboard

Step 6: Verify Update
- Test all functionality
- Check for errors in logs
- Verify data integrity

ROLLBACK PROCEDURE:
------------------
If update causes issues:

1. Stop current application:
   pm2 stop araw-dashboard

2. Restore backup:
   cd /var/www/araw-dashboard
   rm -rf araw
   cp -r araw-backup-[date] araw

3. Restart application:
   cd araw
   pm2 restart araw-dashboard

LOG MANAGEMENT:
--------------

View logs:
pm2 logs araw-dashboard

Log location:
~/.pm2/logs/

Rotate logs (prevent disk fill):
pm2 install pm2-logrotate
pm2 set pm2-logrotate:max_size 100M
pm2 set pm2-logrotate:retain 7

BACKUP STRATEGY:
---------------

WHAT TO BACKUP:
1. Application code: /var/www/araw-dashboard/araw
2. Configuration: .env.local file
3. MySQL Database: Complete database dump
4. User uploaded files (if any)
5. PM2 configuration: pm2 save
6. Nginx configuration: /etc/nginx/conf.d/araw-dashboard.conf

BACKUP FREQUENCY:
- Code: Before each update
- Configuration: After any change
- MySQL Database: Daily (automated)
- Full system: Weekly

BACKUP COMMANDS:

Application Backup:
#!/bin/bash
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="/backup/araw"
mkdir -p $BACKUP_DIR
tar -czf $BACKUP_DIR/araw-$DATE.tar.gz /var/www/araw-dashboard/araw
# Keep only last 30 days of backups
find $BACKUP_DIR -name "araw-*.tar.gz" -mtime +30 -delete

MySQL Database Backup:
#!/bin/bash
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="/backup/araw/mysql"
mkdir -p $BACKUP_DIR
mysqldump -u araw_user -p[PASSWORD] araw_climate_finance > $BACKUP_DIR/araw_db_$DATE.sql
gzip $BACKUP_DIR/araw_db_$DATE.sql
# Keep only last 30 days of backups
find $BACKUP_DIR -name "araw_db_*.sql.gz" -mtime +30 -delete

Automated Daily Backup (cron):
Create backup script at /usr/local/bin/araw-backup.sh:
sudo nano /usr/local/bin/araw-backup.sh

Add both backup commands above, then:
sudo chmod +x /usr/local/bin/araw-backup.sh

Add to crontab:
sudo crontab -e

Add this line (runs daily at 2 AM):
0 2 * * * /usr/local/bin/araw-backup.sh

MySQL Database Restore:
gunzip -c /backup/araw/mysql/araw_db_[DATE].sql.gz | mysql -u araw_user -p[PASSWORD] araw_climate_finance

================================================================================
9. SECURITY CONSIDERATIONS
================================================================================

SECURITY BEST PRACTICES:
-----------------------

1. NETWORK SECURITY:
   [ ] Use HTTPS (SSL/TLS) for all connections
   [ ] Configure firewall to restrict access
   [ ] Use VPN for remote administration
   [ ] Disable unused ports and services
   [ ] Implement rate limiting to prevent DDoS

2. APPLICATION SECURITY:
   [ ] Keep Node.js and npm updated
   [ ] Regular dependency security audits: npm audit
   [ ] Use environment variables for secrets (never commit to git)
   [ ] Implement authentication and authorization
   [ ] Enable CORS only for trusted domains
   [ ] Sanitize all user inputs
   [ ] Implement Content Security Policy (CSP)

3. DATA SECURITY:
   [ ] Encrypt sensitive data at rest
   [ ] Use encrypted connections for data sources
   [ ] Regular database backups
   [ ] Implement data access logging
   [ ] Data retention policies
   [ ] Personal data protection (GDPR-like compliance)

4. ACCESS CONTROL:
   [ ] Implement role-based access control (RBAC)
   [ ] Use strong passwords (minimum 12 characters)
   [ ] Enable multi-factor authentication (MFA)
   [ ] Regular user access reviews
   [ ] Immediate revocation of terminated users
   [ ] Separate admin and user accounts

5. MONITORING & AUDIT:
   [ ] Enable comprehensive logging
   [ ] Monitor for suspicious activities
   [ ] Regular security audits
   [ ] Incident response plan
   [ ] Security awareness training

SECURITY AUDIT COMMAND:
npm audit
npm audit fix  # Apply automatic fixes

RECOMMENDED SECURITY HEADERS (Nginx):
add_header X-Frame-Options "SAMEORIGIN" always;
add_header X-Content-Type-Options "nosniff" always;
add_header X-XSS-Protection "1; mode=block" always;
add_header Referrer-Policy "strict-origin-when-cross-origin" always;

GOVERNMENT COMPLIANCE:
--------------------
For DOF deployment, ensure compliance with:
- Data Privacy Act of 2012 (RA 10173)
- Philippine Cybersecurity Standards
- DICT Security Guidelines
- COA audit requirements
- FOI (Freedom of Information) regulations

================================================================================
10. SUPPORT & CONTACTS
================================================================================

TECHNICAL SUPPORT STRUCTURE:
--------------------------

LEVEL 1 - USER SUPPORT:
Contact: DOF IT Helpdesk
Response Time: 4 business hours
Handles: User access, basic navigation, export issues

LEVEL 2 - APPLICATION SUPPORT:
Contact: Jhonnel (Project Manager)
Email: [PM_EMAIL]
Phone: [PM_PHONE]
Response Time: 24 business hours
Handles: Application errors, configuration, data issues

LEVEL 3 - DEVELOPMENT TEAM:
Contact: Development Team Lead
Response Time: 48 business hours
Handles: Code issues, feature requests, complex bugs

EMERGENCY SUPPORT:
For critical issues (application down, security breach):
Contact: [EMERGENCY_CONTACT]
Phone: [EMERGENCY_PHONE]
Available: 24/7
Response Time: 1 hour

REPORTING ISSUES:
----------------
When reporting issues, include:
1. Detailed description of the problem
2. Steps to reproduce
3. Screenshots (if applicable)
4. Browser and version
5. Error messages from console (F12 → Console)
6. Time when issue occurred
7. User role and permissions

DOCUMENTATION:
-------------
- Technical Architecture: /dev_notes/ARCHITECTURE.md
- Component Guide: /dev_notes/COMPONENT_GUIDE.md
- Quick Start: /dev_notes/QUICK_START.md
- API Documentation: [URL_TO_API_DOCS]

KNOWLEDGE BASE:
--------------
- User Manual: [URL_TO_USER_MANUAL]
- FAQ: [URL_TO_FAQ]
- Video Tutorials: [URL_TO_VIDEOS]

UPDATE NOTIFICATIONS:
--------------------
Subscribe to receive notifications about:
- Security updates
- New features
- Scheduled maintenance
- Known issues

Contact: [NOTIFICATION_EMAIL]

================================================================================
APPENDIX A: QUICK REFERENCE COMMANDS
================================================================================

RHEL SYSTEM MANAGEMENT:
sudo systemctl start [service]     # Start service
sudo systemctl stop [service]      # Stop service
sudo systemctl restart [service]   # Restart service
sudo systemctl status [service]    # Check service status
sudo systemctl enable [service]    # Enable on boot
sudo firewall-cmd --list-all       # Check firewall rules
sudo dnf update                    # Update system packages

MYSQL MANAGEMENT (RHEL):
sudo systemctl start mysqld        # Start MySQL
sudo systemctl stop mysqld         # Stop MySQL
sudo systemctl status mysqld       # Check MySQL status
mysql -u araw_user -p              # Connect to MySQL
mysqldump -u araw_user -p araw_climate_finance > backup.sql  # Backup DB
mysql -u araw_user -p araw_climate_finance < backup.sql      # Restore DB

APPLICATION INSTALLATION:
npm install                    # Install dependencies
npm run build                  # Build for production
npm start                      # Start production server
npm run dev                    # Start development server

PROCESS MANAGEMENT (PM2):
pm2 start npm --name araw-dashboard -- start
pm2 stop araw-dashboard
pm2 restart araw-dashboard
pm2 delete araw-dashboard
pm2 logs araw-dashboard
pm2 status
pm2 save
pm2 startup

MAINTENANCE:
npm audit                      # Check for vulnerabilities
npm audit fix                  # Fix vulnerabilities
npm update                     # Update dependencies
npm outdated                   # Check for outdated packages

GIT OPERATIONS:
git status                     # Check current status
git pull origin [branch]       # Pull latest changes
git checkout [branch]          # Switch branches
git log --oneline -10          # View recent commits

SYSTEM MONITORING:
df -h                          # Check disk space (Linux)
free -m                        # Check memory (Linux)
top                            # Monitor processes (Linux)
netstat -tuln | grep 3000     # Check if port is in use

================================================================================
APPENDIX B: ENVIRONMENT VARIABLES REFERENCE
================================================================================

# Application Configuration
NODE_ENV=production                              # Environment mode
NEXT_PUBLIC_APP_URL=http://[SERVER_IP]:3000     # Public URL
PORT=3000                                        # Application port

# MySQL Database Configuration (REQUIRED FOR DOF)
DATABASE_URL=mysql://araw_user:[PASSWORD]@localhost:3306/araw_climate_finance
DB_HOST=localhost
DB_PORT=3306
DB_NAME=araw_climate_finance
DB_USER=araw_user
DB_PASSWORD=[STRONG_PASSWORD]
DATABASE_POOL_MIN=2
DATABASE_POOL_MAX=10

# Authentication Configuration (Optional)
NEXTAUTH_SECRET=[RANDOM_SECRET_STRING]
NEXTAUTH_URL=http://[SERVER_IP]:3000

# Data Source Configuration
ENABLE_REAL_DATA_SOURCES=false                   # Use mock data initially
DATA_REFRESH_INTERVAL=3600000                    # Refresh every hour (ms)
CACHE_TTL=1800000                                # Cache 30 minutes (ms)

# Export Configuration
MAX_EXPORT_ROWS=100000                           # Maximum rows per export
EXPORT_TEMP_DIR=/tmp/araw-exports               # Temp directory for exports

# Logging Configuration
LOG_LEVEL=info                                   # Log level (debug|info|warn|error)
LOG_FILE=/var/log/araw/application.log          # Log file location

# Performance Configuration
NEXT_TELEMETRY_DISABLED=1                        # Disable telemetry
NODE_OPTIONS=--max-old-space-size=4096          # Increase memory limit

================================================================================
APPENDIX C: DEPLOYMENT CHECKLIST
================================================================================

PRE-DEPLOYMENT:
[ ] Server meets minimum requirements
[ ] Node.js 20+ installed
[ ] Git installed
[ ] Network access configured
[ ] SSL certificate obtained (if using HTTPS)
[ ] Backup plan prepared
[ ] Team briefed on deployment

DEPLOYMENT:
[ ] Source code deployed
[ ] Dependencies installed (npm install)
[ ] Environment configured (.env.local)
[ ] Application built (npm run build)
[ ] Application started (npm start or PM2)
[ ] Firewall configured
[ ] Reverse proxy configured (optional)

POST-DEPLOYMENT:
[ ] Homepage accessible
[ ] All features tested
[ ] Performance verified
[ ] Security scan completed
[ ] Backup verified
[ ] Monitoring enabled
[ ] Team trained
[ ] Documentation updated
[ ] Users notified
[ ] Support process activated

================================================================================
APPENDIX D: COMMON PORT CONFIGURATIONS
================================================================================

DEFAULT PORTS:
- Application: 3000 (Next.js default)
- HTTPS: 443 (standard)
- HTTP: 80 (standard)
- MySQL: 3306 (database)

CHANGING DEFAULT PORT:
Edit package.json:
"scripts": {
  "start": "next start -p [NEW_PORT]"
}

Or set environment variable:
PORT=[NEW_PORT] npm start

================================================================================
APPENDIX E: RHEL + MYSQL DEPLOYMENT SUMMARY
================================================================================

REQUIRED INFRASTRUCTURE FOR DOF:
--------------------------------
Operating System: Red Hat Enterprise Linux 8 or 9
Database: MySQL 8.0+
Web Server: Nginx (reverse proxy)
Process Manager: PM2 (for Node.js)
SSL/TLS: Required for production

CRITICAL STEPS FOR RHEL + MYSQL:
--------------------------------
1. Install RHEL 8/9 with valid subscription
2. Install Node.js 20+ via NodeSource repository
3. Install MySQL 8.0+ from MySQL repository
4. Configure MySQL with secure password
5. Create araw_climate_finance database
6. Create araw_user with proper permissions
7. Install and configure Nginx reverse proxy
8. Configure firewalld for required ports
9. Set SELinux booleans for network access
10. Configure PM2 for auto-start on boot
11. Setup automated MySQL backups via cron
12. Install SSL certificate for HTTPS

RHEL-SPECIFIC CONSIDERATIONS:
-----------------------------
- Use dnf (not apt) for package management
- Configure firewalld (not ufw/iptables)
- Set SELinux booleans for Nginx proxy
- Use systemd for service management
- RHEL subscription required for updates
- Consider RHEL support contract for production

MYSQL-SPECIFIC CONSIDERATIONS:
------------------------------
- Default port: 3306
- Use utf8mb4 character set for international support
- Configure regular automated backups
- Monitor disk space for MySQL data directory
- Optimize MySQL for application workload
- Enable MySQL slow query log for optimization
- Consider MySQL replication for high availability

NETWORK PORTS TO OPEN (firewalld):
----------------------------------
- 3000/tcp: Application (internal)
- 80/tcp: HTTP (Nginx)
- 443/tcp: HTTPS (Nginx)
- 3306/tcp: MySQL (if remote access needed, not recommended)

SECURITY CHECKLIST FOR RHEL + MYSQL:
------------------------------------
[ ] RHEL fully updated (dnf update)
[ ] MySQL root password set and secured
[ ] SELinux enabled and configured (enforcing mode)
[ ] Firewalld active with minimal required ports
[ ] SSL/TLS certificate installed and valid
[ ] MySQL user has minimum required privileges
[ ] Database backups automated and tested
[ ] Application logs monitored
[ ] Nginx security headers configured
[ ] System monitoring enabled
[ ] Audit logging enabled

PERFORMANCE TUNING (RHEL + MYSQL):
----------------------------------
MySQL Configuration (/etc/my.cnf or /etc/my.cnf.d/):
[mysqld]
max_connections = 150
innodb_buffer_pool_size = 2G  # 50-70% of available RAM
innodb_log_file_size = 256M
query_cache_size = 0  # Disabled in MySQL 8.0
slow_query_log = 1
long_query_time = 2

RHEL System Tuning:
- Adjust swappiness: sysctl vm.swappiness=10
- Increase file descriptors: ulimit -n 65535
- Enable transparent huge pages for MySQL

MONITORING COMMANDS (RHEL + MYSQL):
-----------------------------------
System Resources:
top                           # CPU and memory usage
df -h                         # Disk space
iostat                        # I/O statistics
free -m                       # Memory usage

MySQL Status:
mysql -u root -p -e "SHOW PROCESSLIST;"
mysql -u root -p -e "SHOW STATUS LIKE 'Threads_connected';"
mysql -u root -p -e "SHOW VARIABLES LIKE 'max_connections';"
mysqladmin -u root -p status

Application Monitoring:
pm2 monit                     # Real-time PM2 monitoring
pm2 logs araw-dashboard       # Application logs
sudo tail -f /var/log/nginx/access.log
sudo tail -f /var/log/nginx/error.log
sudo journalctl -u mysqld -f

ESTIMATED DEPLOYMENT TIME (RHEL + MYSQL):
-----------------------------------------
Fresh RHEL installation: 1-2 hours
Node.js setup: 15-30 minutes
MySQL installation and configuration: 30-45 minutes
Application deployment: 30-45 minutes
Nginx setup and SSL: 30-45 minutes
Testing and verification: 30-60 minutes

TOTAL: 3-5 hours for complete deployment

ONGOING MAINTENANCE (RHEL + MYSQL):
-----------------------------------
Daily:
- Check application and MySQL status
- Monitor disk space
- Review error logs

Weekly:
- Verify automated backups completed
- Check MySQL performance
- Review security logs

Monthly:
- Apply RHEL security updates
- Apply MySQL updates
- Optimize MySQL databases
- Test backup restoration

SUPPORT RESOURCES:
-----------------
RHEL Support: https://access.redhat.com/support
MySQL Documentation: https://dev.mysql.com/doc/
Node.js Documentation: https://nodejs.org/docs/
Next.js Documentation: https://nextjs.org/docs/

================================================================================
DOCUMENT REVISION HISTORY
================================================================================

Version 2.0 - October 3, 2025
- Complete rewrite for new version deployment
- REQUIRED: RHEL 8+ as deployment platform
- REQUIRED: MySQL 8.0+ as database system
- Added RHEL-specific installation steps
- Added MySQL configuration and management
- Added SELinux and firewalld configuration
- Enhanced troubleshooting for RHEL/MySQL
- Added comprehensive backup procedures
- Updated for Next.js 15.5.3
- Added RHEL + MySQL specific appendix

Version 1.0 - September 2025
- Initial deployment guide

================================================================================
END OF DEPLOYMENT GUIDE
================================================================================

DEPLOYMENT TARGET SPECIFICATIONS:
- Operating System: Red Hat Enterprise Linux (RHEL) 8 or 9
- Database: MySQL 8.0+
- Node.js: 20.x LTS
- Next.js: 15.5.3
- Web Server: Nginx
- Process Manager: PM2

For questions or clarifications regarding this deployment guide, please contact:
Project Manager: Jhonnel
Department: UBQTY Development Team
Target Stakeholder: Asst. Secretary Angie, Department of Finance

This document is intended for authorized personnel only.
Confidential - Department of Finance, Republic of the Philippines

================================================================================

