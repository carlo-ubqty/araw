User Shortcuts
1. bfe - build and fix errors; agent runs server after every successful build: pkill -f "next dev"; npm run dev
2. g - go ahead
3. ho - hold on, let's step back and look at the bigger picture
4. wus - work unit session (1 complete user-agent session)
5. swus - start wus: 
   Step 1: Get the correct date for Philippines (run date command)
   Step 2: Create a new wus log (wus_logs.txt, with proper date); create an ewus for open swus if there are any
6. ewus - end wus: close wus log - review user-agent sops file for any updates; create a concise summary of what was done in the wus, and state of things at time of ewus; make sure env_log is also updated
7. k - Keep a log of all the commands needed to recreate the environment in climate-finance-dashboard/local/env_log.txt
8. r - review and update agent's context by reviewing local folder files for any updates
9. cpt - clean-up and plant trace - do the misc loggings (sops, wus, env) - log all env-related commands executed

SOPs (IMPORTANT! FOLLOW THESE IN OUR SESSIONS!)
0. Agent should assume the role of a senior dev assistant; make communications concise, and do away with flowery and unnecessary banter. I am not a child.
1. Agent should analyse and plan out moves together with the user. Agent updates the code from its end, but should explain every change and should wait for user's approval before implementing changes. Give enough multi-perspective context for the user to be able to have an informed decision on the next move. ALWAYS IMPLEMENT DRYLY.
2. Agent runs commands from its end whenever possible, including DB investigative queries. For DB changes, the agent should give the user a mysql command that the user can copy-paste on mysql cli
3. Agent will do a build (npm run build) after every code update; agent will run the development server after every successful build: pkill -f "next dev"; npm run dev
4. Agent can only run DB commands in the local env. For qa/uat/prod, the agent needs to give the user the commands he can run from his end.
5. Agent should NOT modify local/dev_db_changes.txt - user maintains this file manually to track DB changes
6. Explain-first interaction style for code edits
   - Before edits: state What/Why (1â€“2 lines), list files, and show minimal diffs/snippets.
   - Then apply edits and run build (bfe). Afterward: report Impact/Test and a quick Rollback tip.
   - Group larger changes; parallelize read-only lookups.
   - Log key milestones to wus_logs.txt (SWUS/EWUS and checkpoints).
7. Keep a log of all the commands needed to recreate the environment in climate-finance-dashboard/local/env_log.txt
8. Include working branch details in all logs (wus_logs.txt, env_logs.txt, deployment_notes.txt) - specify which git branch work was performed on, any branch switches, and final branch state for next agent
9. Create concise, one-liner commits - keep commit messages clear and brief
10. Always update dev_notes items when applicable

PROJECT CONTEXT & DOMAIN REQUIREMENTS
=====================================
ARAW Philippine Climate Finance Dashboard - Critical Context for Development Decisions

Purpose: Track and visualize climate finance flows in the Philippines aligned with:
- Paris Agreement commitments (NDC: Nationally Determined Contribution)
- National Climate Change Action Plan (NCCAP) 2011-2028
- National Adaptation Plan (NAP) 2023-2050
- NDC Implementation Plan (75% GHG reduction target: 2.7% unconditional, 72.3% conditional)

Key Data Sources & Finance Flows:
1. Domestic Public: National/LGU budgets, People's Survival Fund, CCET (Climate Change Expenditure Tagging)
2. International: Green Climate Fund, GEF, MDBs, bilateral ODA, adaptation funds
3. Private Sector: Sustainable bonds, green loans, PPPs, ESG investments

Institutional Stakeholders:
- Climate Change Commission (CCC): Lead policy coordination and MRV
- Department of Finance (DOF): Climate finance oversight  
- Sectoral Leads: DA, DENR, DOE, DOTr for NDC/MRV
- Local Government Units (LGUs): Frontline implementation

Critical Dashboard Requirements:
- MRV Integration: Measurement, Reporting, Verification of climate actions
- CCET Visualization: Climate-tagged government expenditure tracking
- Multi-source Finance Tracking: Public, international, private flows
- Project Pipeline Status: Adaptation/mitigation projects by sector/region
- NDC/NAP Alignment: Progress on national climate commitments
- Paris Agreement Compliance: Transparency and reporting standards

Development Priority: All features must support Philippine government's climate finance transparency, policy implementation tracking, and international reporting obligations.

Initial Techstack: 
NodeJS 
Python (data processing)
NextJS (+ HeroUI)
Postgres
Typescript (!)
Ubuntu
Nginx
PM2

Local DB creds:
localhost
user: root 
pwd: root 